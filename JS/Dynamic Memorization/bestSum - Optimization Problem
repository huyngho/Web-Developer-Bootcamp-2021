const bestSum = (targetSum, numbers, memo = {}) {
  if (bestSum in memo) return memo[bestSum];
  if (bestSum === 0) return [];
  if (bestSum < 0) return null;
  
  let shortestCombination = null;
  
  for (let num of numbers) {
    const remainder = targetSum - num;
    const remainderCombination = bestSum(remainder, numbers, memo);
    if (remainderCombination !== null) {
      const combination = [ ...remainderCombination, num ]
      // if the combination is shorter than the current "shortest", update it
      if (shortestCombination === null || combination.length < shortestCombination.length) {
        shortestCombination = combination;
      }
    }
  }
  memo[bestSum] = shortestCombination;
  return shortestCombination;
};
    
// m = target sum
// n = numbers.length
// Brute Force = 
// time: O(n^m * m)
// space: O(m^2)
// Memoried = 
// time: O(m^2 * n)
// space: O(m^2)
    
console.log(howSum(7, [5, 3, 4, 7])); // [7]
console.log(howSum(7, [2, 4])); // [3, 5]
console.log(howSum(8, [1, 4, 5])); // [4, 4]
console.log(howSum(100, [1, 2, 5, 25])); // [25,25,25,25]
