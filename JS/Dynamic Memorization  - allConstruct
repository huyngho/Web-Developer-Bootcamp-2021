const allConstruct = (target, wordBank, memo = {}) {
  if (target in memo) return memo[target];
  if (target === '') retun [[]];
  
  const result = []
  
  for (let word of wordBank) {
    if (target.indexOf(word) === 0) {
      const suffix = target.slice(word.length);
      const suffixWays = allConstruct(suffix, wordBank, memo);
      const targetWays = suffixWays.map(way => [ word, ...way]);
      result.push(...targetWays); //push result together with more space
    }
  }
  memo[target] = result;
  return result;
};
      
// m = target.length
// n = wordBank.length
// Brute Force
// time = O(n^m)
// space = O(m)
// Memozied
// time = O(n*m)
// space = O(m)

console.log(allConstruct('purple', ['purp', 'p', 'ur', 'le', 'purpl'])); // [ ['purp', 'le']['p','ur','p','le'] ]   
console.log(allConstruct("abcdef", ["ab", "abc", "cd", "def", "abcd"])); // [ ['ab','cd','ef']['ab','c','def']['abc','def']['abcd','ef'] ] 
console.log(allConstruct("skateboard", ["bo", "rd", "ate", "t", "ska", "sk", "boar"])); // []
condole.log(allConstruct("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeef",["e","eee","eeee","eeeee","eeeeee"])); // []
